name: Run Azure Terraform
description: Deploy OpenAI

inputs:
  configuration_path:
    description: "Path to resource configuration file"
    required: true
  client_id:
    description: "Azure Service Principal Client ID"
    required: true
  tenant_id:
    description: "Azure Tenant ID"
    required: true
  action:
    description: "Terraform action to run"
    required: true
    allowed_values: ["plan", "apply", "destroy"]
  subscription_id:
    description: "Azure Subscription ID for Terraform state"
    required: true
  state_resource_group:
    description: "Azure Resource Group for Terraform state"
    required: true
  state_storage_account:
    description: "Azure Storage Account for Terraform state"
    required: true
  state_container:
    description: "Azure Storage Container for Terraform state"
    default: "state"
  state_key:
    description: "Azure Storage Key for Terraform state"
    required: true
  terraform_version:
    description: "Terraform version to use"
    required: false
    default: 1.7.5

runs:
  using: composite
  steps:
    - name: Echo inputs
      shell: bash
      run: |
        echo "Client ID: ${{ inputs.client_id }}"
        echo "Tenant ID: ${{ inputs.tenant_id }}"
        echo "Action: ${{ inputs.action }}"
        echo "Subscription ID: ${{ inputs.subscription_id }}"
        echo "State Resource Group: ${{ inputs.state_resource_group }}"
        echo "State Storage Account: ${{ inputs.state_storage_account }}"
        echo "State Container: ${{ inputs.state_container }}"
        echo "State Key: ${{ inputs.state_key }}"
        echo "Terraform Version: ${{ inputs.terraform_version }}"
        echo "Configuration Path: ${{ inputs.configuration_path }}"

    - name: Output current path and file list
      run: |
        pwd
        ls -al
      shell: bash

    - name: Terraform install
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ inputs.terraform_version }}

    - name: Terraform init
      run: |
        terraform init \
          -backend-config="subscription_id=${{ inputs.state_subscription_id }}" \
          -backend-config="resource_group_name=${{ inputs.state_resource_group }}" \
          -backend-config="storage_account_name=${{ inputs.state_storage_account }}" \
          -backend-config="container_name=${{ inputs.state_container }}" \
          -backend-config="key=${{ inputs.state_key }}"
      working-directory: ${{ github.action_path }}/pattern
      shell: bash
      env:
        ARM_CLIENT_ID: ${{ inputs.client_id }}
        ARM_SUBSCRIPTION_ID: ${{ inputs.subscription_id }}
        ARM_TENANT_ID: ${{ inputs.tenant_id }}
        ARM_USE_OIDC: true
        TF_IN_AUTOMATION: true
        TF_INPUT: false

    - name: Terraform ${{ inputs.action }}
      run: |
        terraform --chdir="${{ github.action_path }}/pattern" ${{ inputs.action }} --var="configuration_path=${{ inputs.configuration_path }}"
      # working-directory: ${{ github.action_path }}/pattern
      shell: bash
      env:
        ARM_CLIENT_ID: ${{ inputs.client_id }}
        ARM_SUBSCRIPTION_ID: ${{ inputs.subscription_id }}
        ARM_TENANT_ID: ${{ inputs.tenant_id }}
        ARM_USE_OIDC: true
        TF_IN_AUTOMATION: true
        TF_CLI_ARGS_apply: -auto-approve
        TF_CLI_ARGS_destroy: -auto-approve
        TF_INPUT: false
